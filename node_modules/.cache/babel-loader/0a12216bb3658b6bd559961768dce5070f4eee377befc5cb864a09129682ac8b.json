{"ast":null,"code":"// Modern Navbar scroll effects and interactions\nexport const initNavbarEffects = () => {\n  // Modern navbar scroll effect\n  const navbar = document.querySelector('.modern-navbar');\n  if (navbar) {\n    const handleScroll = () => {\n      if (window.scrollY > 50) {\n        navbar.classList.add('scrolled');\n      } else {\n        navbar.classList.remove('scrolled');\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n\n    // Clean up function on return\n    const cleanup = () => window.removeEventListener('scroll', handleScroll);\n\n    // Modern navigation pills active state\n    const navPillBtns = document.querySelectorAll('.nav-pill-btn');\n    const mobileNavBtns = document.querySelectorAll('.mobile-nav-btn');\n    const handleNavClick = (clickedBtn, isDesktop = true) => {\n      // Remove active class from all buttons\n      if (isDesktop) {\n        navPillBtns.forEach(btn => btn.classList.remove('active'));\n      } else {\n        mobileNavBtns.forEach(btn => btn.classList.remove('active'));\n      }\n      // Add active class to clicked button\n      clickedBtn.classList.add('active');\n    };\n\n    // Desktop navigation pills\n    navPillBtns.forEach(btn => {\n      btn.addEventListener('click', () => handleNavClick(btn, true));\n    });\n\n    // Mobile navigation buttons\n    mobileNavBtns.forEach(btn => {\n      btn.addEventListener('click', () => handleNavClick(btn, false));\n    });\n\n    // Scroll-based active state updates\n    const sections = ['hero', 'services', 'about', 'contact'];\n    const updateActiveNavOnScroll = () => {\n      const scrollPosition = window.scrollY + 150; // Offset for better detection\n\n      sections.forEach((sectionId, index) => {\n        const section = document.getElementById(sectionId);\n        if (section) {\n          const sectionTop = section.offsetTop;\n          const sectionHeight = section.offsetHeight;\n          if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {\n            // Update desktop nav\n            navPillBtns.forEach(btn => btn.classList.remove('active'));\n            if (navPillBtns[index]) {\n              navPillBtns[index].classList.add('active');\n            }\n\n            // Update mobile nav\n            mobileNavBtns.forEach(btn => btn.classList.remove('active'));\n            if (mobileNavBtns[index]) {\n              mobileNavBtns[index].classList.add('active');\n            }\n          }\n        }\n      });\n    };\n    window.addEventListener('scroll', updateActiveNavOnScroll);\n\n    // Mobile menu auto-close\n    const navbarToggler = document.querySelector('.modern-toggler');\n    const navbarCollapse = document.querySelector('.navbar-collapse');\n    if (navbarToggler && navbarCollapse) {\n      // Close mobile menu when clicking on nav links\n      mobileNavBtns.forEach(link => {\n        link.addEventListener('click', () => {\n          // Hide mobile menu\n          navbarCollapse.classList.remove('show');\n        });\n      });\n\n      // Close mobile menu when clicking outside\n      document.addEventListener('click', e => {\n        if (!navbar.contains(e.target) && navbarCollapse.classList.contains('show')) {\n          navbarCollapse.classList.remove('show');\n        }\n      });\n    }\n\n    // Animate navbar on page load\n    const animateNavbar = () => {\n      if (navbar) {\n        navbar.style.transform = 'translateY(-100%)';\n        navbar.style.transition = 'transform 0.6s ease';\n        setTimeout(() => {\n          navbar.style.transform = 'translateY(0)';\n        }, 100);\n      }\n    };\n\n    // Initialize animations\n    animateNavbar();\n\n    // Return cleanup function\n    return () => {\n      cleanup();\n      window.removeEventListener('scroll', updateActiveNavOnScroll);\n    };\n  }\n  return null;\n};","map":{"version":3,"names":["initNavbarEffects","navbar","document","querySelector","handleScroll","window","scrollY","classList","add","remove","addEventListener","cleanup","removeEventListener","navPillBtns","querySelectorAll","mobileNavBtns","handleNavClick","clickedBtn","isDesktop","forEach","btn","sections","updateActiveNavOnScroll","scrollPosition","sectionId","index","section","getElementById","sectionTop","offsetTop","sectionHeight","offsetHeight","navbarToggler","navbarCollapse","link","e","contains","target","animateNavbar","style","transform","transition","setTimeout"],"sources":["/Users/mukhammad/Desktop/lending-yolda/src/utils/navbar.js"],"sourcesContent":["// Modern Navbar scroll effects and interactions\nexport const initNavbarEffects = () => {\n  // Modern navbar scroll effect\n  const navbar = document.querySelector('.modern-navbar');\n\n  if (navbar) {\n    const handleScroll = () => {\n      if (window.scrollY > 50) {\n        navbar.classList.add('scrolled');\n      } else {\n        navbar.classList.remove('scrolled');\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    // Clean up function on return\n    const cleanup = () => window.removeEventListener('scroll', handleScroll);\n\n    // Modern navigation pills active state\n    const navPillBtns = document.querySelectorAll('.nav-pill-btn');\n    const mobileNavBtns = document.querySelectorAll('.mobile-nav-btn');\n\n    const handleNavClick = (clickedBtn, isDesktop = true) => {\n      // Remove active class from all buttons\n      if (isDesktop) {\n        navPillBtns.forEach((btn) => btn.classList.remove('active'));\n      } else {\n        mobileNavBtns.forEach((btn) => btn.classList.remove('active'));\n      }\n      // Add active class to clicked button\n      clickedBtn.classList.add('active');\n    };\n\n    // Desktop navigation pills\n    navPillBtns.forEach((btn) => {\n      btn.addEventListener('click', () => handleNavClick(btn, true));\n    });\n\n    // Mobile navigation buttons\n    mobileNavBtns.forEach((btn) => {\n      btn.addEventListener('click', () => handleNavClick(btn, false));\n    });\n\n    // Scroll-based active state updates\n    const sections = ['hero', 'services', 'about', 'contact'];\n    \n    const updateActiveNavOnScroll = () => {\n      const scrollPosition = window.scrollY + 150; // Offset for better detection\n\n      sections.forEach((sectionId, index) => {\n        const section = document.getElementById(sectionId);\n        if (section) {\n          const sectionTop = section.offsetTop;\n          const sectionHeight = section.offsetHeight;\n\n          if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {\n            // Update desktop nav\n            navPillBtns.forEach((btn) => btn.classList.remove('active'));\n            if (navPillBtns[index]) {\n              navPillBtns[index].classList.add('active');\n            }\n\n            // Update mobile nav\n            mobileNavBtns.forEach((btn) => btn.classList.remove('active'));\n            if (mobileNavBtns[index]) {\n              mobileNavBtns[index].classList.add('active');\n            }\n          }\n        }\n      });\n    };\n\n    window.addEventListener('scroll', updateActiveNavOnScroll);\n\n    // Mobile menu auto-close\n    const navbarToggler = document.querySelector('.modern-toggler');\n    const navbarCollapse = document.querySelector('.navbar-collapse');\n\n    if (navbarToggler && navbarCollapse) {\n      // Close mobile menu when clicking on nav links\n      mobileNavBtns.forEach((link) => {\n        link.addEventListener('click', () => {\n          // Hide mobile menu\n          navbarCollapse.classList.remove('show');\n        });\n      });\n\n      // Close mobile menu when clicking outside\n      document.addEventListener('click', (e) => {\n        if (!navbar.contains(e.target) && navbarCollapse.classList.contains('show')) {\n          navbarCollapse.classList.remove('show');\n        }\n      });\n    }\n\n    // Animate navbar on page load\n    const animateNavbar = () => {\n      if (navbar) {\n        navbar.style.transform = 'translateY(-100%)';\n        navbar.style.transition = 'transform 0.6s ease';\n\n        setTimeout(() => {\n          navbar.style.transform = 'translateY(0)';\n        }, 100);\n      }\n    };\n\n    // Initialize animations\n    animateNavbar();\n\n    // Return cleanup function\n    return () => {\n      cleanup();\n      window.removeEventListener('scroll', updateActiveNavOnScroll);\n    };\n  }\n\n  return null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}