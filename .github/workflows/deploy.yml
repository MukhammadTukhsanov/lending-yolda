name: üöÄ Deploy Yolda Landing Page

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Test and Build Job
  build-and-test:
    name: üîç Build & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run tests
        run: npm test -- --coverage --watchAll=false

      - name: üî® Build application
        run: npm run build

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'

      - name: üíæ Cache build
        uses: actions/cache@v3
        if: matrix.node-version == '20.x'
        with:
          path: build
          key: build-${{ github.sha }}

  # Code Quality Job
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üé® Check code formatting
        run: npx prettier --check src/

      - name: üîç Run ESLint
        run: npx eslint src/ --ext .js,.jsx,.ts,.tsx

  # Security Scan Job
  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîí Run security audit
        run: npm audit --audit-level moderate

      - name: üõ°Ô∏è Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Deploy to Staging (develop branch)
  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: [build-and-test, code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging.yolda.uz

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üî® Build for staging
        run: npm run build
        env:
          REACT_APP_API_URL: https://staging.yolda.uz/api
          REACT_APP_ENVIRONMENT: staging

      - name: üöÄ Deploy to Staging Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          source: 'build/*,public/api/*'
          target: ${{ secrets.STAGING_PATH }}
          rm: true

  # Deploy to Production (main branch)
  deploy-production:
    name: üöÄ Deploy to Production
    needs: [build-and-test, code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://yolda.uz

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üî® Build for production
        run: npm run build
        env:
          REACT_APP_API_URL: https://yolda.uz/api
          REACT_APP_ENVIRONMENT: production

      - name: üìÑ Generate deployment info
        run: |
          echo "Deployment Date: $(date)" > build/deploy-info.txt
          echo "Git Commit: ${{ github.sha }}" >> build/deploy-info.txt
          echo "Branch: ${{ github.ref_name }}" >> build/deploy-info.txt
          echo "Deployed by: ${{ github.actor }}" >> build/deploy-info.txt

      - name: üöÄ Deploy to Production Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: 'build/*,public/api/*'
          target: ${{ secrets.PRODUCTION_PATH }}
          rm: true

      - name: üîÑ Restart web server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            sudo systemctl reload apache2
            sudo chown -R www-data:www-data ${{ secrets.PRODUCTION_PATH }}
            sudo chmod 644 ${{ secrets.PRODUCTION_PATH }}/api/*.php

      - name: üß™ Health Check
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üåê Website should be live at: https://mukhammadtukhsanov.github.io/lending-yolda/"
